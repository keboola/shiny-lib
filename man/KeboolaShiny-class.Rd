% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/keboola-shiny.R
\docType{class}
\name{KeboolaShiny-class}
\alias{KeboolaShiny}
\alias{KeboolaShiny-class}
\title{Helper Library for Keboola Shiny Applications}
\description{
Helper Library for Keboola Shiny Applications
}
\section{Fields}{

\describe{
\item{\code{session}}{Shiny session object}

\item{\code{loggedIn}}{1 if the user is logged in, 0 if not}

\item{\code{errMsg}}{Error encountered when logging in}

\item{\code{loginErrrorOutput}}{HTML element with login error}

\item{\code{bucketId}}{ID of the current bucket}

\item{\code{token}}{Current KBC token}

\item{\code{client}}{Instance of Storage API client}

\item{\code{db}}{Instance of Redshift Driver}

\item{\code{kfig}}{Instance of Application Config}

\item{\code{kdata}}{Instance of Application Data}

\item{\code{loading}}{Flow control flag set to 1/true while initializing}
}}
\section{Methods}{

\describe{
\item{\code{concludeStartup(options)}}{Resume the startup tasks after data loading
\subsection{Parameters}{\itemize{
\item{\code{options} initial startup options}
}}
\subsection{Return Value}{void}}

\item{\code{dbConnect()}}{Establish a connection via provisioning client credentials.
\subsection{Return Value}{TRUE}}

\item{\code{getAppConfig()}}{Get the appConfigId from the query string.
 Apps created via the kbc ui will have config starting kbc_
 Apps created via LG will start with lg_
\subsection{Return Value}{String storage Bucket ID.}}

\item{\code{getBuckets()}}{Return a list of accessible buckets.
\subsection{Return Value}{Character vector of bucketIDs}}

\item{\code{getLogin()}}{Verify login information and initialize application.
\subsection{Return Value}{List with items:
token, runId, bucket, loggedIn, errMsg, client, ready
}}

\item{\code{getToken()}}{Get the token from the session headers or input element.
\subsection{Return Value}{String KBC token}}

\item{\code{initialize(session = getDefaultReactiveDomain())}}{Constructor.
\subsection{Parameters}{\itemize{
\item{\code{session} Shiny session object.}
}}}

\item{\code{initLibs()}}{connect to DB and initialise the keboolaAppData and keboolaAppConfig libraries
\subsection{Return Value}{void}}

\item{\code{loadTable(prettyName, name)}}{Load table from Storage. 
(Exposed wrapper for \code{KeboolaAppData} method).
\subsection{Parameters}{\itemize{
\item{\code{prettyName} Table name to be used in labels throughout the app.}
\item{\code{name} Name of table in SAPI.}
}}
\subsection{Return Value}{data.frame with table data}}

\item{\code{loadTables(tables, options)}}{load tables specified in the parameter list tables from storage
\subsection{Parameters}{\itemize{
\item{\code{tables} list of tables to load}
\item{\code{options} startup method options}
}}
\subsection{Return Value}{TRUE if tables succesfully loaded.  FALSE if data was too big and reduction is required.}}

\item{\code{ready()}}{The DOM element id = kb_loggedIn is set to 1 when login is successful meaning that data loading can start
\subsection{Return Value}{TRUE or FALSE}}

\item{\code{sourceData()}}{This is a hack used to catch the case when the data-too-large detour has been completed and 
 to resume the startup operations in that case
\subsection{Return Value}{list of data.frames containing sourceData}}

\item{\code{startup(options = list(appTitle = "", tables = list(), cleanData = FALSE,
  dataToSave = NULL, configCallback = NULL, description = FALSE, customElements
  = NULL, inputList = NULL, forkButtonRef = NULL))}}{This is the main KBC app entry point for all initialisation housekeeping such as authentication and data retrieval
\subsection{Parameters}{\itemize{
\item{\code{options} List with items:
appTitle - the title of the application
tables - list of tables to load from sapi list(localname = sapiname)
dataToSave - the reactive in server.R that holds the input filtered data, or any data that would want to be saved to sapi
configCallback - the method which is to be invoked when a configuration is loaded.  This method will generally update inputs according to the selectedConfig values
description - whether or not to include a description object
customElements - the method for processing custom elements of the description}
}}
\subsection{Return Value}{list containing loginInfo}}
}}

