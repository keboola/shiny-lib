% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/KeboolaAppData.R
\docType{class}
\name{KeboolaAppData-class}
\alias{KeboolaAppData}
\alias{KeboolaAppData-class}
\title{This is the configuration component library for managing app data loading / saving}
\description{
This is the configuration component library for managing app data loading / saving
}
\section{Fields}{

\describe{
\item{\code{session}}{}

\item{\code{client}}{Storage API client.}

\item{\code{db}}{Redshift driver connection.}

\item{\code{bucket}}{Bucket Id.}

\item{\code{runId}}{Run Id}

\item{\code{lastSaveValue}}{TODO}

\item{\code{lastTable}}{TODO}

\item{\code{maxMemory}}{TODO}

\item{\code{sourceData}}{TODO}

\item{\code{memoryUsage}}{TODO}

\item{\code{loadList}}{TODO}

\item{\code{allLoaded}}{TODO}
}}
\section{Methods}{

\describe{
\item{\code{checkTables(tables)}}{Checks the table list to see if maximum application memory will be exceeded by retrieving the data
\subsection{Parameters}{\itemize{
\item{\code{tables} List of tables to load from SAPI.}
}}
\subsection{Return Value}{If memory exceeded - a list of table metadata for each requested table, else NULL.}}

\item{\code{dataModalButton(dataToSave)}}{Method for the config button that opens the save data modal dialog
\subsection{Parameters}{\itemize{
\item{\code{dataToSave} the name of the data.frame that will be saved to sapi. }
}}
\subsection{Return Value}{list(keboolaModalButton)}}

\item{\code{getCleanData(types, cleanData)}}{Apply column types detected by LG to a data frame.
\subsection{Parameters}{\itemize{
\item{\code{types} Data frame with contents of table with LG datatypes 
(this table is usually named 'VAI__1' in SAPI).}
\item{\code{cleanData} A data frame with actual data, its columns are
expected to be listed as rows in the types table.}
}}
\subsection{Return Value}{data.frame supplied in cleanData parameter with applied data types.}}

\item{\code{getConvertedDataType(type, mode)}}{Convert LG type definition to an R data type.
\subsection{Parameters}{\itemize{
\item{\code{type} LG data type string ('integer', 'datetime', etc.).}
\item{\code{mode} LG variable mode ('continuous', 'discrete').}
}}
\subsection{Return Value}{R data type name.}}

\item{\code{getDescription(appTitle, customElements, desc = NULL)}}{Method returns HTML content for a descriptor.
\subsection{Parameters}{\itemize{
\item{\code{appTitle} Title of the app.}
\item{\code{customElements} Callback for printing custom elements, 
signature: function(elementId, content)
function should return a single HTML element. Pass NULL to ignore custom elements.}
\item{\code{desc} Descriptor contents. If NULL, then \code{getDescriptor} will be used.}
}}
\subsection{Return Value}{TODO}}

\item{\code{getDescriptor()}}{Get results descriptor from SAPI
\subsection{Return Value}{Nested list of elements.}}

\item{\code{getRecipeTables(options)}}{TODO
\subsection{Parameters}{\itemize{
\item{\code{options} List of options to pass on to the loadTables method.}
}}
\subsection{Return Value}{List of tables. each element has required name, and optional reducible.}}

\item{\code{initialize(sapiClient, appConfig, dbConnection, maxMemory = 5e+08,
  session = getDefaultReactiveDomain())}}{Constructor.
\subsection{Parameters}{\itemize{
\item{\code{sapiClient} Storage API client.}
\item{\code{bucketId} Bucket where config table is stored.}
\item{\code{run_id} The runId of the data to load.}
\item{\code{dbConnection} An established database connection.}
\item{\code{maxMemory} Maximum sourceData memory allocation.}
}}}

\item{\code{loadTable(prettyName, table)}}{Internal method to retrieve table data from Redshift 
\subsection{Parameters}{\itemize{
\item{\code{prettyName} Table name to be used in labels throughout the app.}
\item{\code{table} Name of table in SAPI.}
}}
\subsection{Return Value}{data.frame with table data.}}

\item{\code{loadTables(tables, options = list(cleanData = FALSE, description = FALSE))}}{Load tables from SAPI.
\subsection{Parameters}{\itemize{
\item{\code{tables} List of tables key as R variable, value as table name (without bucket).}
\item{\code{options} List with items:
cleanData boolean TRUE to compute datatypes of cleanData table
description boolean TRUE to include descriptor in returned dataSet.}
}}
\subsection{Return Value}{List of data indexed by variable name given in tables argument keys.}}

\item{\code{previewData(tableMeta)}}{Offers a limited view of sample data
\subsection{Parameters}{\itemize{
\item{\code{tableMeta} The table object returned from SAPI}
}}
\subsection{Return Value}{reactive construct.  updated DOM is stored in session$output}}

\item{\code{problemTablesUI(problemTables)}}{Creates and returns a UI for the user to reduce the amount of data being loaded to 'hopefully' under the memory limit
\subsection{Parameters}{\itemize{
\item{\code{problemTables} A list of reducible tables that the UI will display as tabbed editors}
}}
\subsection{Return Value}{A tabset panel with one tab per reducible table}}

\item{\code{processSection(section, level, customElements)}}{Internal method that returns HTML content for the given section node.
\subsection{Parameters}{\itemize{
\item{\code{section} Node of the descriptor.}
\item{\code{level} Heading level (1 = h2, 2 = h3).}
\item{\code{customElements} Callback for processing custom elements.}
}}
\subsection{Return Value}{List of HTML elements.}}

\item{\code{saveDataFormUI(dataToSave)}}{Get the UI elements for the data saving form
\subsection{Return Value}{List of html elements that make up the form.}}

\item{\code{saveResultUI(dataToSave)}}{This method attempts to save the data.frame given by dataToSave, 
 and returns a UI element which alerts to the success or failure of the operation
\subsection{Parameters}{\itemize{
\item{\code{dataToSave} the name of the data.frame that will be saved to SAPI}
}}
\subsection{Return Value}{The success or failure alert dom element}}

\item{\code{setMemoryUsage(tableMeta)}}{TODO
\subsection{Parameters}{\itemize{
\item{\code{tableMeta} TODO}
}}
\subsection{Return Value}{TODO}}

\item{\code{tableEditor(tableMeta)}}{TODO
\subsection{Parameters}{\itemize{
\item{\code{tableMeta} TODO}
}}
\subsection{Return Value}{TODO}}
}}

